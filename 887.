# redefine state O(KN) O(KN)
class Solution:
    def superEggDrop(self, k: int, n: int) -> int:
        dp = [[0] * (n+1) for _ in range(k + 1)]
        m = 0
        while dp[k][m] < n:
            m += 1
            for i in range(1, k + 1):
                dp[i][m] = dp[i-1][m-1] + dp[i][m-1] + 1
        return m
  
# O(KNlogN) O(KN)
class Solution:
    def superEggDrop(self, k: int, n: int) -> int:
        memo = dict()
        def dp(k, n):
            if k == 1:
                return n
            if n == 0:
                return 0
            
            if (k, n) in memo:
                return memo[(k, n)]
            
            res = float('inf')
            l, r = 1, n
            while l <= r:
                mid = (l + r) // 2
                broken = dp(k - 1, mid -1)
                not_broken = dp(k, n - mid)

                if broken > not_broken:
                    r = mid - 1
                    res = min(res, broken + 1)
                else:
                    l = mid + 1
                    res = min(res, not_broken + 1)
            
            memo[(k, n)] = res
            return res
        return dp(k, n)

# O(K*N^2) O(KN)
# timeover
class Solution:
    def superEggDrop(self, k: int, n: int) -> int:
        memo = dict()
        def dp(k, n):
            if k == 1:
                return n
            if n == 0:
                return 0
            
            if (k, n) in memo:
                return memo[(k, n)]
            
            res = float('inf')
            for i in range(1,n + 1):
                res = min(res, max(dp(k, n - i),dp(k - 1, i - 1)) + 1)
            memo[(k, n)] = res
            return res
        return dp(k, n)
