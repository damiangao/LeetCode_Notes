# elegant solution
class Solution:
    def minWindow(self, s: str, t: str) -> str:
        need = collections.defaultdict(int)
        for c in t:
            need[c] += 1
        classes = sum(map(lambda x: 1 if x > 0 else 0, need.values()))
        window = collections.defaultdict(int)
        l = r = 0
        start, res = 0, float('inf')
        valid = 0
        while r < len(s):
            new_c = s[r]
            r += 1
            if need[new_c]:
                window[new_c] += 1
                if window[new_c] == need[new_c]:
                    valid += 1
            while valid == classes:
                if r - l < res:
                    start = l
                    res = r - l

                del_c = s[l]
                l += 1
                if need[del_c]:
                    if window[del_c] == need[del_c]:
                        valid -= 1
                    window[del_c] -= 1

        return s[start:start+res] if res < float('inf') else ""
