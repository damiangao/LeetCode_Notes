# quick sort
class Solution:
    def sortArray(self, nums: List[int]) -> List[int]:
        self.quicksort(nums, 0, len(nums)-1)
        return nums
    def quicksort(self, nums, l, r):
        if r - l <= 0:
            return
        mid = self.partition(nums, l, r)
        self.quicksort(nums, l, mid-1)
        self.quicksort(nums, mid+1, r)

    def partition(self, nums, l, r):
        pivot = random.randint(l, r)
        nums[pivot], nums[r] = nums[r], nums[pivot]
        i = l - 1
        for j in range(l, r):
            if nums[j] < nums[r]:
                i += 1
                nums[i], nums[j] = nums[j], nums[i]
        i += 1
        nums[i], nums[r] = nums[r], nums[i]
        return i

# merge sort
class Solution:

    def sortArray(self, nums: List[int]) -> List[int]:
        return self.mergesort(nums, 0, len(nums)-1)
    
    def mergesort(self, nums, l, r):
        if l == r:
            return [nums[l]]
        mid = (l+r) >> 1
        left = self.mergesort(nums, l, mid)
        right = self.mergesort(nums, mid+1, r)
        return self.merge(left, right)

    def merge(self, left, right):
        m, n = len(left), len(right)
        pl, pr = 0, 0
        ret = []
        while pl < m and pr < n:
            if left[pl] <= right[pr]:
                ret.append(left[pl])
                pl += 1
            else:
                ret.append(right[pr])
                pr += 1
        
        while pl < m:
            ret.append(left[pl])
            pl += 1
        
        while pr < n:
            ret.append(right[pr])
            pr += 1
        
        return ret
