class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        n = len(nums)
        sum_ = sum(nums)
        max_ = max(nums)
        if n < 2:
            return False

        if sum_ % 2 != 0:
            return False 

        target = sum_ // 2
        if max_ > target:
            return False
        dp = [[False] * (target+1) for _ in range(n)]

        for i in range(n):
            dp[i][0] = True
        dp[0][nums[0]] = True
        for i in range(1, n):
            num = nums[i]
            for j in range(1, target + 1):
                if j >= num:
                    dp[i][j] = dp[i-1][j] | dp[i-1][j-num]
                else:
                    dp[i][j] = dp[i-1][j]
        return dp[n-1][target]   
